name: SonarQube-Server
on:
  push:
    paths:
      - 'CSharpProject/**'
    branches: [main, master, develop]
  pull_request:
      types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  build:
    name: SonarQube-Server
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 1.17
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarQube packages
        uses: actions/cache@v4.2.0
        with:
          path: ~\.sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4.2.0
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Set Project Key/Name
        # This step sets the project key and name based on the repository name and the organization name.
        id: set-project-key
        shell: powershell
        run: |
          $repoName = "${{ github.repository }}".Split("/")
          $orgName = $repoName[0]
          $projectName = $repoName[1]
          $projectKey = "$orgName-gh_$projectName"
          echo "PROJECT_KEY=$projectKey" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Build and analyze
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"${PROJECT_KEY}"" /n:"${PROJECT_KEY}"" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ vars.SONAR_HOST_URL }}" /d:sonar.verbose=true 
          dotnet build CSharpProject/SomeConsoleApplication.sln
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
